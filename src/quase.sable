Package quase;

Helpers
	letra = ['a'..'z'] | ['A'..'Z'] | ['á'..'ú'] | ['à'..'ù'] | ['â'..'û'] | 'ã' | 'õ' | 'ç' | ['Á'..'Ú'] | ['À'..'Ù'] | ['Â'..'Û'] | 'Ã' | 'Õ' | 'Ç';
	digito = ['0'..'9'];
	char = [0..0xffff];
	espaco = ' ';
	rc = 13;
	nl = 10;
	com_esq = '{';
	com_dir = '}';
	und = '_';

Tokens
	e_comercial = '&';
	ponto_virg = ';';
	classe = 'classe';
	filha_classe = 'filha da classe';
	comeca = 'começa';
	termina = 'termina';
	obj = 'objeto';
	virg = ',';
	var = 'var';
	cons = 'cons';
	atr = ':=';
	int_tipo = 'int';
	bool_tipo = 'bool';
	real_tipo = 'real';
	det_proc_inicial = '=>';
	proc = 'procedimento';
	par_esq = '(';
	par_dir = ')';
	func = 'função';
	se = 'se';
	senao = 'senão';
	enquanto = 'enquanto';
	igual_simples = '=';
	ponto = '.';
	bool_verdadeiro = 'true';
	bool_falso = 'false';
	subt = '-';
	entao = 'então';
	adc = '+';
	mult = '*';
	div = '/';
	mod = '%';
	igual_comp = '==';
	menor = '<';
	nao = '!';
	e_logico = 'e';
	ou_logico = 'ou';
	comentario = com_esq[char - [com_esq + com_dir]]*com_dir;
	id = letra(letra | und)*;
	cid = und(letra | und)*;
	vazio = (espaco | rc | nl)+;
	num_inteiro = digito+ | ('0b'('1' | '0')+);
	num_real = (digito+'.'digito+) | (digito+('e' | 'E')('-' | digito)digito*);
	
Ignored Tokens
	comentario,
	vazio;
	
Productions

	exp = exp1
		| {subt_part} subt exp exp1
		| {adc} [left]:exp exp1;
	exp1 = {subt_part}
		| {adc} adc [right]:exp;