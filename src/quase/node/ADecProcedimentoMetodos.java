/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.node;

import java.util.*;
import quase.analysis.*;

@SuppressWarnings("nls")
public final class ADecProcedimentoMetodos extends PMetodos
{
    private final LinkedList<PDecProcedimento> _decProcedimento_ = new LinkedList<PDecProcedimento>();

    public ADecProcedimentoMetodos()
    {
        // Constructor
    }

    public ADecProcedimentoMetodos(
        @SuppressWarnings("hiding") List<?> _decProcedimento_)
    {
        // Constructor
        setDecProcedimento(_decProcedimento_);

    }

    @Override
    public Object clone()
    {
        return new ADecProcedimentoMetodos(
            cloneList(this._decProcedimento_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecProcedimentoMetodos(this);
    }

    public LinkedList<PDecProcedimento> getDecProcedimento()
    {
        return this._decProcedimento_;
    }

    public void setDecProcedimento(List<?> list)
    {
        for(PDecProcedimento e : this._decProcedimento_)
        {
            e.parent(null);
        }
        this._decProcedimento_.clear();

        for(Object obj_e : list)
        {
            PDecProcedimento e = (PDecProcedimento) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._decProcedimento_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._decProcedimento_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._decProcedimento_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PDecProcedimento> i = this._decProcedimento_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDecProcedimento) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
