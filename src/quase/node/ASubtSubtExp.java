/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.node;

import quase.analysis.*;

@SuppressWarnings("nls")
public final class ASubtSubtExp extends PSubtExp
{
    private TSubt _subt_;
    private PExp _exp_;

    public ASubtSubtExp()
    {
        // Constructor
    }

    public ASubtSubtExp(
        @SuppressWarnings("hiding") TSubt _subt_,
        @SuppressWarnings("hiding") PExp _exp_)
    {
        // Constructor
        setSubt(_subt_);

        setExp(_exp_);

    }

    @Override
    public Object clone()
    {
        return new ASubtSubtExp(
            cloneNode(this._subt_),
            cloneNode(this._exp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubtSubtExp(this);
    }

    public TSubt getSubt()
    {
        return this._subt_;
    }

    public void setSubt(TSubt node)
    {
        if(this._subt_ != null)
        {
            this._subt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subt_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._subt_)
            + toString(this._exp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._subt_ == child)
        {
            this._subt_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._subt_ == oldChild)
        {
            setSubt((TSubt) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
