/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.analysis;

import java.util.*;
import quase.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDefClasse> copy = new ArrayList<PDefClasse>(node.getDefClasse());
            Collections.reverse(copy);
            for(PDefClasse e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFamilia() != null)
        {
            node.getFamilia().apply(this);
        }
        outAPrograma(node);
    }

    public void inAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultIn(node);
    }

    public void outAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaFamilia(AFamiliaFamilia node)
    {
        inAFamiliaFamilia(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PFamiliaAux> copy = new ArrayList<PFamiliaAux>(node.getFamiliaAux());
            Collections.reverse(copy);
            for(PFamiliaAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAFamiliaFamilia(node);
    }

    public void inAVazioFamilia(AVazioFamilia node)
    {
        defaultIn(node);
    }

    public void outAVazioFamilia(AVazioFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioFamilia(AVazioFamilia node)
    {
        inAVazioFamilia(node);
        outAVazioFamilia(node);
    }

    public void inAFamiliaAux(AFamiliaAux node)
    {
        defaultIn(node);
    }

    public void outAFamiliaAux(AFamiliaAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaAux(AFamiliaAux node)
    {
        inAFamiliaAux(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        if(node.getEComercial() != null)
        {
            node.getEComercial().apply(this);
        }
        outAFamiliaAux(node);
    }

    public void inARelacao(ARelacao node)
    {
        defaultIn(node);
    }

    public void outARelacao(ARelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacao(ARelacao node)
    {
        inARelacao(node);
        if(node.getTermina() != null)
        {
            node.getTermina().apply(this);
        }
        if(node.getMetodos() != null)
        {
            node.getMetodos().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getComeca() != null)
        {
            node.getComeca().apply(this);
        }
        if(node.getCid() != null)
        {
            node.getCid().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outARelacao(node);
    }

    public void inADefClasse(ADefClasse node)
    {
        defaultIn(node);
    }

    public void outADefClasse(ADefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefClasse(ADefClasse node)
    {
        inADefClasse(node);
        if(node.getTermina() != null)
        {
            node.getTermina().apply(this);
        }
        if(node.getMetodos() != null)
        {
            node.getMetodos().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getComeca() != null)
        {
            node.getComeca().apply(this);
        }
        if(node.getCid() != null)
        {
            node.getCid().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outADefClasse(node);
    }

    public void inAAtributos(AAtributos node)
    {
        defaultIn(node);
    }

    public void outAAtributos(AAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributos(AAtributos node)
    {
        inAAtributos(node);
        {
            List<PDecAux> copy = new ArrayList<PDecAux>(node.getDecAux());
            Collections.reverse(copy);
            for(PDecAux e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributos(node);
    }

    public void inADecObjDecAux(ADecObjDecAux node)
    {
        defaultIn(node);
    }

    public void outADecObjDecAux(ADecObjDecAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjDecAux(ADecObjDecAux node)
    {
        inADecObjDecAux(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjDecAux(node);
    }

    public void inADecVarDecAux(ADecVarDecAux node)
    {
        defaultIn(node);
    }

    public void outADecVarDecAux(ADecVarDecAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecAux(ADecVarDecAux node)
    {
        inADecVarDecAux(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarDecAux(node);
    }

    public void inADecConsDecAux(ADecConsDecAux node)
    {
        defaultIn(node);
    }

    public void outADecConsDecAux(ADecConsDecAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecAux(ADecConsDecAux node)
    {
        inADecConsDecAux(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsDecAux(node);
    }

    public void inAMetodos(AMetodos node)
    {
        defaultIn(node);
    }

    public void outAMetodos(AMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMetodos(AMetodos node)
    {
        inAMetodos(node);
        {
            List<PMetodosAux> copy = new ArrayList<PMetodosAux>(node.getMetodosAux());
            Collections.reverse(copy);
            for(PMetodosAux e : copy)
            {
                e.apply(this);
            }
        }
        outAMetodos(node);
    }

    public void inADecProcedimentoMetodosAux(ADecProcedimentoMetodosAux node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoMetodosAux(ADecProcedimentoMetodosAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoMetodosAux(ADecProcedimentoMetodosAux node)
    {
        inADecProcedimentoMetodosAux(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcedimentoMetodosAux(node);
    }

    public void inADecFuncaoMetodosAux(ADecFuncaoMetodosAux node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoMetodosAux(ADecFuncaoMetodosAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoMetodosAux(ADecFuncaoMetodosAux node)
    {
        inADecFuncaoMetodosAux(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoMetodosAux(node);
    }

    public void inADecObj(ADecObj node)
    {
        defaultIn(node);
    }

    public void outADecObj(ADecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObj(ADecObj node)
    {
        inADecObj(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PVirgIdAux> copy = new ArrayList<PVirgIdAux>(node.getVirgIdAux());
            Collections.reverse(copy);
            for(PVirgIdAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCid() != null)
        {
            node.getCid().apply(this);
        }
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        outADecObj(node);
    }

    public void inADecVar(ADecVar node)
    {
        defaultIn(node);
    }

    public void outADecVar(ADecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVar(ADecVar node)
    {
        inADecVar(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PVirgIdAux> copy = new ArrayList<PVirgIdAux>(node.getVirgIdAux());
            Collections.reverse(copy);
            for(PVirgIdAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADecVar(node);
    }

    public void inAVirgIdAux(AVirgIdAux node)
    {
        defaultIn(node);
    }

    public void outAVirgIdAux(AVirgIdAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgIdAux(AVirgIdAux node)
    {
        inAVirgIdAux(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgIdAux(node);
    }

    public void inADecCons(ADecCons node)
    {
        defaultIn(node);
    }

    public void outADecCons(ADecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecCons(ADecCons node)
    {
        inADecCons(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PVirgInicializacaoAux> copy = new ArrayList<PVirgInicializacaoAux>(node.getVirgInicializacaoAux());
            Collections.reverse(copy);
            for(PVirgInicializacaoAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getCons() != null)
        {
            node.getCons().apply(this);
        }
        outADecCons(node);
    }

    public void inAVirgInicializacaoAux(AVirgInicializacaoAux node)
    {
        defaultIn(node);
    }

    public void outAVirgInicializacaoAux(AVirgInicializacaoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgInicializacaoAux(AVirgInicializacaoAux node)
    {
        inAVirgInicializacaoAux(node);
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgInicializacaoAux(node);
    }

    public void inAInicializacao(AInicializacao node)
    {
        defaultIn(node);
    }

    public void outAInicializacao(AInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicializacao(AInicializacao node)
    {
        inAInicializacao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtr() != null)
        {
            node.getAtr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAInicializacao(node);
    }

    public void inATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipo(ATipoClasseTipo node)
    {
        inATipoClasseTipo(node);
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        outATipoClasseTipo(node);
    }

    public void inATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        inATipoPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimitivoTipo(node);
    }

    public void inAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        inAIntTipoPrimitivo(node);
        if(node.getIntTipo() != null)
        {
            node.getIntTipo().apply(this);
        }
        outAIntTipoPrimitivo(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getBoolTipo() != null)
        {
            node.getBoolTipo().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        inARealTipoPrimitivo(node);
        if(node.getRealTipo() != null)
        {
            node.getRealTipo().apply(this);
        }
        outARealTipoPrimitivo(node);
    }

    public void inATipoClasse(ATipoClasse node)
    {
        defaultIn(node);
    }

    public void outATipoClasse(ATipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasse(ATipoClasse node)
    {
        inATipoClasse(node);
        if(node.getCid() != null)
        {
            node.getCid().apply(this);
        }
        outATipoClasse(node);
    }

    public void inADecProcedimento(ADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimento(ADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        inADecProcedimento(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProc() != null)
        {
            node.getProc().apply(this);
        }
        if(node.getDetProcInicial() != null)
        {
            node.getDetProcInicial().apply(this);
        }
        outADecProcedimento(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outADecFuncao(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inAParametrosParametros(AParametrosParametros node)
    {
        defaultIn(node);
    }

    public void outAParametrosParametros(AParametrosParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosParametros(AParametrosParametros node)
    {
        inAParametrosParametros(node);
        {
            List<PVirgParametroAux> copy = new ArrayList<PVirgParametroAux>(node.getVirgParametroAux());
            Collections.reverse(copy);
            for(PVirgParametroAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametrosParametros(node);
    }

    public void inAVirgParametroAux(AVirgParametroAux node)
    {
        defaultIn(node);
    }

    public void outAVirgParametroAux(AVirgParametroAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgParametroAux(AVirgParametroAux node)
    {
        inAVirgParametroAux(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgParametroAux(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParametro(node);
    }

    public void inAIfOnlyComando(AIfOnlyComando node)
    {
        defaultIn(node);
    }

    public void outAIfOnlyComando(AIfOnlyComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfOnlyComando(AIfOnlyComando node)
    {
        inAIfOnlyComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfOnlyComando(node);
    }

    public void inAIfElseComando(AIfElseComando node)
    {
        defaultIn(node);
    }

    public void outAIfElseComando(AIfElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseComando(AIfElseComando node)
    {
        inAIfElseComando(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfElseComando(node);
    }

    public void inAWhileComando(AWhileComando node)
    {
        defaultIn(node);
    }

    public void outAWhileComando(AWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileComando(AWhileComando node)
    {
        inAWhileComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAWhileComando(node);
    }

    public void inAAtrComando(AAtrComando node)
    {
        defaultIn(node);
    }

    public void outAAtrComando(AAtrComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrComando(AAtrComando node)
    {
        inAAtrComando(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIgualSimples() != null)
        {
            node.getIgualSimples().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAtrComando(node);
    }

    public void inAChamadaComando(AChamadaComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaComando(AChamadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaComando(AChamadaComando node)
    {
        inAChamadaComando(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getIdPontoAux() != null)
        {
            node.getIdPontoAux().apply(this);
        }
        outAChamadaComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inAIdPontoAux(AIdPontoAux node)
    {
        defaultIn(node);
    }

    public void outAIdPontoAux(AIdPontoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdPontoAux(AIdPontoAux node)
    {
        inAIdPontoAux(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdPontoAux(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getTermina() != null)
        {
            node.getTermina().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecAux> copy = new ArrayList<PDecAux>(node.getDecAux());
            Collections.reverse(copy);
            for(PDecAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComeca() != null)
        {
            node.getComeca().apply(this);
        }
        outABloco(node);
    }

    public void inARealExp(ARealExp node)
    {
        defaultIn(node);
    }

    public void outARealExp(ARealExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealExp(ARealExp node)
    {
        inARealExp(node);
        if(node.getNumReal() != null)
        {
            node.getNumReal().apply(this);
        }
        outARealExp(node);
    }

    public void inAIntExp(AIntExp node)
    {
        defaultIn(node);
    }

    public void outAIntExp(AIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        inAIntExp(node);
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        outAIntExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        if(node.getBoolVerdadeiro() != null)
        {
            node.getBoolVerdadeiro().apply(this);
        }
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        if(node.getBoolFalso() != null)
        {
            node.getBoolFalso().apply(this);
        }
        outAFalseExp(node);
    }

    public void inAIdExp(AIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdExp(AIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExp(AIdExp node)
    {
        inAIdExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExp(node);
    }

    public void inAChamadaExp(AChamadaExp node)
    {
        defaultIn(node);
    }

    public void outAChamadaExp(AChamadaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaExp(AChamadaExp node)
    {
        inAChamadaExp(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getIdPontoAux() != null)
        {
            node.getIdPontoAux().apply(this);
        }
        outAChamadaExp(node);
    }

    public void inAAtributoExp(AAtributoExp node)
    {
        defaultIn(node);
    }

    public void outAAtributoExp(AAtributoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoExp(AAtributoExp node)
    {
        inAAtributoExp(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getIdPontoAux() != null)
        {
            node.getIdPontoAux().apply(this);
        }
        outAAtributoExp(node);
    }

    public void inAParExp(AParExp node)
    {
        defaultIn(node);
    }

    public void outAParExp(AParExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExp(AParExp node)
    {
        inAParExp(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAParExp(node);
    }

    public void inASubtPartExp(ASubtPartExp node)
    {
        defaultIn(node);
    }

    public void outASubtPartExp(ASubtPartExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtPartExp(ASubtPartExp node)
    {
        inASubtPartExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSubt() != null)
        {
            node.getSubt().apply(this);
        }
        outASubtPartExp(node);
    }

    public void inAIfExp(AIfExp node)
    {
        defaultIn(node);
    }

    public void outAIfExp(AIfExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExp(AIfExp node)
    {
        inAIfExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfExp(node);
    }

    public void inAAdcExp(AAdcExp node)
    {
        defaultIn(node);
    }

    public void outAAdcExp(AAdcExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdcExp(AAdcExp node)
    {
        inAAdcExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAdc() != null)
        {
            node.getAdc().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAdcExp(node);
    }

    public void inASubtExp(ASubtExp node)
    {
        defaultIn(node);
    }

    public void outASubtExp(ASubtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtExp(ASubtExp node)
    {
        inASubtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSubt() != null)
        {
            node.getSubt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubtExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getIgualComp() != null)
        {
            node.getIgualComp().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAIgualExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMenorExp(node);
    }

    public void inANaoExp(ANaoExp node)
    {
        defaultIn(node);
    }

    public void outANaoExp(ANaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExp(ANaoExp node)
    {
        inANaoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANaoExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getELogico() != null)
        {
            node.getELogico().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOuLogico() != null)
        {
            node.getOuLogico().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp(node);
    }

    public void inABlocoExpExp(ABlocoExpExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpExp(ABlocoExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpExp(ABlocoExpExp node)
    {
        inABlocoExpExp(node);
        if(node.getBlocoExp() != null)
        {
            node.getBlocoExp().apply(this);
        }
        outABlocoExpExp(node);
    }

    public void inABlocoExp(ABlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExp(ABlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExp(ABlocoExp node)
    {
        inABlocoExp(node);
        if(node.getTermina() != null)
        {
            node.getTermina().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            Collections.reverse(copy);
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComeca() != null)
        {
            node.getComeca().apply(this);
        }
        outABlocoExp(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamada(node);
    }

    public void inAVazioListaExp(AVazioListaExp node)
    {
        defaultIn(node);
    }

    public void outAVazioListaExp(AVazioListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaExp(AVazioListaExp node)
    {
        inAVazioListaExp(node);
        outAVazioListaExp(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        {
            List<PVirgExpAux> copy = new ArrayList<PVirgExpAux>(node.getVirgExpAux());
            Collections.reverse(copy);
            for(PVirgExpAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaExpListaExp(node);
    }

    public void inAVirgExpAux(AVirgExpAux node)
    {
        defaultIn(node);
    }

    public void outAVirgExpAux(AVirgExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgExpAux(AVirgExpAux node)
    {
        inAVirgExpAux(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgExpAux(node);
    }
}
