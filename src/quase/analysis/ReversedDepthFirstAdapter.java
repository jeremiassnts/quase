/* This file was generated by SableCC (http://www.sablecc.org/). */

package quase.analysis;

import java.util.*;
import quase.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        {
            List<PDefClasse> copy = new ArrayList<PDefClasse>(node.getDefClasse());
            Collections.reverse(copy);
            for(PDefClasse e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFamilia() != null)
        {
            node.getFamilia().apply(this);
        }
        outAProgramaPrograma(node);
    }

    public void inAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultIn(node);
    }

    public void outAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaFamilia(AFamiliaFamilia node)
    {
        inAFamiliaFamilia(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PFamiliaAux> copy = new ArrayList<PFamiliaAux>(node.getFamiliaAux());
            Collections.reverse(copy);
            for(PFamiliaAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAFamiliaFamilia(node);
    }

    public void inAVazioFamilia(AVazioFamilia node)
    {
        defaultIn(node);
    }

    public void outAVazioFamilia(AVazioFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioFamilia(AVazioFamilia node)
    {
        inAVazioFamilia(node);
        outAVazioFamilia(node);
    }

    public void inARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultIn(node);
    }

    public void outARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacaoRelacao(ARelacaoRelacao node)
    {
        inARelacaoRelacao(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getFilhaClasse() != null)
        {
            node.getFilhaClasse().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outARelacaoRelacao(node);
    }

    public void inADefClasseDefClasse(ADefClasseDefClasse node)
    {
        defaultIn(node);
    }

    public void outADefClasseDefClasse(ADefClasseDefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefClasseDefClasse(ADefClasseDefClasse node)
    {
        inADefClasseDefClasse(node);
        if(node.getTermina() != null)
        {
            node.getTermina().apply(this);
        }
        if(node.getMetodos() != null)
        {
            node.getMetodos().apply(this);
        }
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getComeca() != null)
        {
            node.getComeca().apply(this);
        }
        if(node.getCid() != null)
        {
            node.getCid().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outADefClasseDefClasse(node);
    }

    public void inAAtributosAtributos(AAtributosAtributos node)
    {
        defaultIn(node);
    }

    public void outAAtributosAtributos(AAtributosAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributosAtributos(AAtributosAtributos node)
    {
        inAAtributosAtributos(node);
        {
            List<PDecAux> copy = new ArrayList<PDecAux>(node.getDecAux());
            Collections.reverse(copy);
            for(PDecAux e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributosAtributos(node);
    }

    public void inAMetodosMetodos(AMetodosMetodos node)
    {
        defaultIn(node);
    }

    public void outAMetodosMetodos(AMetodosMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMetodosMetodos(AMetodosMetodos node)
    {
        inAMetodosMetodos(node);
        {
            List<PMetodosAux> copy = new ArrayList<PMetodosAux>(node.getMetodosAux());
            Collections.reverse(copy);
            for(PMetodosAux e : copy)
            {
                e.apply(this);
            }
        }
        outAMetodosMetodos(node);
    }

    public void inADecObjDecObj(ADecObjDecObj node)
    {
        defaultIn(node);
    }

    public void outADecObjDecObj(ADecObjDecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjDecObj(ADecObjDecObj node)
    {
        inADecObjDecObj(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PVirgIdAux> copy = new ArrayList<PVirgIdAux>(node.getVirgIdAux());
            Collections.reverse(copy);
            for(PVirgIdAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCid() != null)
        {
            node.getCid().apply(this);
        }
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        outADecObjDecObj(node);
    }

    public void inADecVarDecVar(ADecVarDecVar node)
    {
        defaultIn(node);
    }

    public void outADecVarDecVar(ADecVarDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecVar(ADecVarDecVar node)
    {
        inADecVarDecVar(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PVirgIdAux> copy = new ArrayList<PVirgIdAux>(node.getVirgIdAux());
            Collections.reverse(copy);
            for(PVirgIdAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADecVarDecVar(node);
    }

    public void inADecConsDecCons(ADecConsDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConsDecCons(ADecConsDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecCons(ADecConsDecCons node)
    {
        inADecConsDecCons(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        {
            List<PVirgInicializacaoAux> copy = new ArrayList<PVirgInicializacaoAux>(node.getVirgInicializacaoAux());
            Collections.reverse(copy);
            for(PVirgInicializacaoAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getCons() != null)
        {
            node.getCons().apply(this);
        }
        outADecConsDecCons(node);
    }

    public void inAInicializacaoInicializacao(AInicializacaoInicializacao node)
    {
        defaultIn(node);
    }

    public void outAInicializacaoInicializacao(AInicializacaoInicializacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicializacaoInicializacao(AInicializacaoInicializacao node)
    {
        inAInicializacaoInicializacao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtr() != null)
        {
            node.getAtr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAInicializacaoInicializacao(node);
    }

    public void inATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipo(ATipoClasseTipo node)
    {
        inATipoClasseTipo(node);
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        outATipoClasseTipo(node);
    }

    public void inATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        inATipoPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimitivoTipo(node);
    }

    public void inAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoPrimitivo(AIntTipoPrimitivo node)
    {
        inAIntTipoPrimitivo(node);
        if(node.getIntTipo() != null)
        {
            node.getIntTipo().apply(this);
        }
        outAIntTipoPrimitivo(node);
    }

    public void inABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoPrimitivo(ABoolTipoPrimitivo node)
    {
        inABoolTipoPrimitivo(node);
        if(node.getBoolTipo() != null)
        {
            node.getBoolTipo().apply(this);
        }
        outABoolTipoPrimitivo(node);
    }

    public void inARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        inARealTipoPrimitivo(node);
        if(node.getRealTipo() != null)
        {
            node.getRealTipo().apply(this);
        }
        outARealTipoPrimitivo(node);
    }

    public void inATipoClasse(ATipoClasse node)
    {
        defaultIn(node);
    }

    public void outATipoClasse(ATipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasse(ATipoClasse node)
    {
        inATipoClasse(node);
        if(node.getCid() != null)
        {
            node.getCid().apply(this);
        }
        outATipoClasse(node);
    }

    public void inADecProcedimento(ADecProcedimento node)
    {
        defaultIn(node);
    }

    public void outADecProcedimento(ADecProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimento(ADecProcedimento node)
    {
        inADecProcedimento(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProc() != null)
        {
            node.getProc().apply(this);
        }
        if(node.getDetProcInicial() != null)
        {
            node.getDetProcInicial().apply(this);
        }
        outADecProcedimento(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outADecFuncao(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inAParametrosParametros(AParametrosParametros node)
    {
        defaultIn(node);
    }

    public void outAParametrosParametros(AParametrosParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosParametros(AParametrosParametros node)
    {
        inAParametrosParametros(node);
        {
            List<PVirgParametroAux> copy = new ArrayList<PVirgParametroAux>(node.getVirgParametroAux());
            Collections.reverse(copy);
            for(PVirgParametroAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametrosParametros(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParametro(node);
    }

    public void inAIfOnlyComando(AIfOnlyComando node)
    {
        defaultIn(node);
    }

    public void outAIfOnlyComando(AIfOnlyComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfOnlyComando(AIfOnlyComando node)
    {
        inAIfOnlyComando(node);
        if(node.getComando1() != null)
        {
            node.getComando1().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfOnlyComando(node);
    }

    public void inAComando1Comando(AComando1Comando node)
    {
        defaultIn(node);
    }

    public void outAComando1Comando(AComando1Comando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComando1Comando(AComando1Comando node)
    {
        inAComando1Comando(node);
        if(node.getComando1() != null)
        {
            node.getComando1().apply(this);
        }
        outAComando1Comando(node);
    }

    public void inAIfElseComando1(AIfElseComando1 node)
    {
        defaultIn(node);
    }

    public void outAIfElseComando1(AIfElseComando1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseComando1(AIfElseComando1 node)
    {
        inAIfElseComando1(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfElseComando1(node);
    }

    public void inAComando2Comando1(AComando2Comando1 node)
    {
        defaultIn(node);
    }

    public void outAComando2Comando1(AComando2Comando1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComando2Comando1(AComando2Comando1 node)
    {
        inAComando2Comando1(node);
        if(node.getComando2() != null)
        {
            node.getComando2().apply(this);
        }
        outAComando2Comando1(node);
    }

    public void inAWhileComando2(AWhileComando2 node)
    {
        defaultIn(node);
    }

    public void outAWhileComando2(AWhileComando2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileComando2(AWhileComando2 node)
    {
        inAWhileComando2(node);
        if(node.getComando3() != null)
        {
            node.getComando3().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAWhileComando2(node);
    }

    public void inAComando3Comando2(AComando3Comando2 node)
    {
        defaultIn(node);
    }

    public void outAComando3Comando2(AComando3Comando2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComando3Comando2(AComando3Comando2 node)
    {
        inAComando3Comando2(node);
        if(node.getComando3() != null)
        {
            node.getComando3().apply(this);
        }
        outAComando3Comando2(node);
    }

    public void inAAtrComando3(AAtrComando3 node)
    {
        defaultIn(node);
    }

    public void outAAtrComando3(AAtrComando3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrComando3(AAtrComando3 node)
    {
        inAAtrComando3(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIgualSimples() != null)
        {
            node.getIgualSimples().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAtrComando3(node);
    }

    public void inAChamadaComando3(AChamadaComando3 node)
    {
        defaultIn(node);
    }

    public void outAChamadaComando3(AChamadaComando3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaComando3(AChamadaComando3 node)
    {
        inAChamadaComando3(node);
        if(node.getPontoVirg() != null)
        {
            node.getPontoVirg().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getIdPontoAux() != null)
        {
            node.getIdPontoAux().apply(this);
        }
        outAChamadaComando3(node);
    }

    public void inABlocoComando3(ABlocoComando3 node)
    {
        defaultIn(node);
    }

    public void outABlocoComando3(ABlocoComando3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando3(ABlocoComando3 node)
    {
        inABlocoComando3(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando3(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getTermina() != null)
        {
            node.getTermina().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecAux> copy = new ArrayList<PDecAux>(node.getDecAux());
            Collections.reverse(copy);
            for(PDecAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComeca() != null)
        {
            node.getComeca().apply(this);
        }
        outABloco(node);
    }

    public void inAIfExp(AIfExp node)
    {
        defaultIn(node);
    }

    public void outAIfExp(AIfExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfExp(AIfExp node)
    {
        inAIfExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getMid() != null)
        {
            node.getMid().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfExp(node);
    }

    public void inAExp1Exp(AExp1Exp node)
    {
        defaultIn(node);
    }

    public void outAExp1Exp(AExp1Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1Exp(AExp1Exp node)
    {
        inAExp1Exp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAExp1Exp(node);
    }

    public void inASubtExp1(ASubtExp1 node)
    {
        defaultIn(node);
    }

    public void outASubtExp1(ASubtExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtExp1(ASubtExp1 node)
    {
        inASubtExp1(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSubt() != null)
        {
            node.getSubt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubtExp1(node);
    }

    public void inAAdcExp1(AAdcExp1 node)
    {
        defaultIn(node);
    }

    public void outAAdcExp1(AAdcExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdcExp1(AAdcExp1 node)
    {
        inAAdcExp1(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAdc() != null)
        {
            node.getAdc().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAdcExp1(node);
    }

    public void inASubtPartExp1(ASubtPartExp1 node)
    {
        defaultIn(node);
    }

    public void outASubtPartExp1(ASubtPartExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtPartExp1(ASubtPartExp1 node)
    {
        inASubtPartExp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getSubt() != null)
        {
            node.getSubt().apply(this);
        }
        outASubtPartExp1(node);
    }

    public void inAExp1Exp1(AExp1Exp1 node)
    {
        defaultIn(node);
    }

    public void outAExp1Exp1(AExp1Exp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1Exp1(AExp1Exp1 node)
    {
        inAExp1Exp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExp1Exp1(node);
    }

    public void inAMultExp2(AMultExp2 node)
    {
        defaultIn(node);
    }

    public void outAMultExp2(AMultExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp2(AMultExp2 node)
    {
        inAMultExp2(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExp2(node);
    }

    public void inADivExp2(ADivExp2 node)
    {
        defaultIn(node);
    }

    public void outADivExp2(ADivExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp2(ADivExp2 node)
    {
        inADivExp2(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExp2(node);
    }

    public void inAModExp2(AModExp2 node)
    {
        defaultIn(node);
    }

    public void outAModExp2(AModExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp2(AModExp2 node)
    {
        inAModExp2(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExp2(node);
    }

    public void inAExp3Exp2(AExp3Exp2 node)
    {
        defaultIn(node);
    }

    public void outAExp3Exp2(AExp3Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        inAExp3Exp2(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExp3Exp2(node);
    }

    public void inAIgualExp3(AIgualExp3 node)
    {
        defaultIn(node);
    }

    public void outAIgualExp3(AIgualExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp3(AIgualExp3 node)
    {
        inAIgualExp3(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getIgualComp() != null)
        {
            node.getIgualComp().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAIgualExp3(node);
    }

    public void inAMenorExp3(AMenorExp3 node)
    {
        defaultIn(node);
    }

    public void outAMenorExp3(AMenorExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp3(AMenorExp3 node)
    {
        inAMenorExp3(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMenorExp3(node);
    }

    public void inAExp4Exp3(AExp4Exp3 node)
    {
        defaultIn(node);
    }

    public void outAExp4Exp3(AExp4Exp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        inAExp4Exp3(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExp4Exp3(node);
    }

    public void inAAndExp4(AAndExp4 node)
    {
        defaultIn(node);
    }

    public void outAAndExp4(AAndExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp4(AAndExp4 node)
    {
        inAAndExp4(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getELogico() != null)
        {
            node.getELogico().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp4(node);
    }

    public void inAOrExp4(AOrExp4 node)
    {
        defaultIn(node);
    }

    public void outAOrExp4(AOrExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp4(AOrExp4 node)
    {
        inAOrExp4(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOuLogico() != null)
        {
            node.getOuLogico().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp4(node);
    }

    public void inAExp5Exp4(AExp5Exp4 node)
    {
        defaultIn(node);
    }

    public void outAExp5Exp4(AExp5Exp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp5Exp4(AExp5Exp4 node)
    {
        inAExp5Exp4(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExp5Exp4(node);
    }

    public void inANaoExp5(ANaoExp5 node)
    {
        defaultIn(node);
    }

    public void outANaoExp5(ANaoExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExp5(ANaoExp5 node)
    {
        inANaoExp5(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANaoExp5(node);
    }

    public void inAExp6Exp5(AExp6Exp5 node)
    {
        defaultIn(node);
    }

    public void outAExp6Exp5(AExp6Exp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp6Exp5(AExp6Exp5 node)
    {
        inAExp6Exp5(node);
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        outAExp6Exp5(node);
    }

    public void inARealExp6(ARealExp6 node)
    {
        defaultIn(node);
    }

    public void outARealExp6(ARealExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealExp6(ARealExp6 node)
    {
        inARealExp6(node);
        if(node.getNumReal() != null)
        {
            node.getNumReal().apply(this);
        }
        outARealExp6(node);
    }

    public void inAIntExp6(AIntExp6 node)
    {
        defaultIn(node);
    }

    public void outAIntExp6(AIntExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp6(AIntExp6 node)
    {
        inAIntExp6(node);
        if(node.getNumInteiro() != null)
        {
            node.getNumInteiro().apply(this);
        }
        outAIntExp6(node);
    }

    public void inATrueExp6(ATrueExp6 node)
    {
        defaultIn(node);
    }

    public void outATrueExp6(ATrueExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExp6(ATrueExp6 node)
    {
        inATrueExp6(node);
        if(node.getBoolVerdadeiro() != null)
        {
            node.getBoolVerdadeiro().apply(this);
        }
        outATrueExp6(node);
    }

    public void inAFalseExp6(AFalseExp6 node)
    {
        defaultIn(node);
    }

    public void outAFalseExp6(AFalseExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExp6(AFalseExp6 node)
    {
        inAFalseExp6(node);
        if(node.getBoolFalso() != null)
        {
            node.getBoolFalso().apply(this);
        }
        outAFalseExp6(node);
    }

    public void inAParExp6(AParExp6 node)
    {
        defaultIn(node);
    }

    public void outAParExp6(AParExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExp6(AParExp6 node)
    {
        inAParExp6(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAParExp6(node);
    }

    public void inAAtributoExp6(AAtributoExp6 node)
    {
        defaultIn(node);
    }

    public void outAAtributoExp6(AAtributoExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoExp6(AAtributoExp6 node)
    {
        inAAtributoExp6(node);
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        if(node.getIdPontoAux() != null)
        {
            node.getIdPontoAux().apply(this);
        }
        outAAtributoExp6(node);
    }

    public void inAChamadaExp6(AChamadaExp6 node)
    {
        defaultIn(node);
    }

    public void outAChamadaExp6(AChamadaExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaExp6(AChamadaExp6 node)
    {
        inAChamadaExp6(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getIdPontoAux() != null)
        {
            node.getIdPontoAux().apply(this);
        }
        outAChamadaExp6(node);
    }

    public void inABlocoExpExp6(ABlocoExpExp6 node)
    {
        defaultIn(node);
    }

    public void outABlocoExpExp6(ABlocoExpExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpExp6(ABlocoExpExp6 node)
    {
        inABlocoExpExp6(node);
        if(node.getBlocoExp() != null)
        {
            node.getBlocoExp().apply(this);
        }
        outABlocoExpExp6(node);
    }

    public void inABlocoExpBlocoExp(ABlocoExpBlocoExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpBlocoExp(ABlocoExpBlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpBlocoExp(ABlocoExpBlocoExp node)
    {
        inABlocoExpBlocoExp(node);
        if(node.getTermina() != null)
        {
            node.getTermina().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            Collections.reverse(copy);
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getComeca() != null)
        {
            node.getComeca().apply(this);
        }
        outABlocoExpBlocoExp(node);
    }

    public void inAChamadaChamada(AChamadaChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaChamada(AChamadaChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaChamada(AChamadaChamada node)
    {
        inAChamadaChamada(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaChamada(node);
    }

    public void inAIdAtributo(AIdAtributo node)
    {
        defaultIn(node);
    }

    public void outAIdAtributo(AIdAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtributo(AIdAtributo node)
    {
        inAIdAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAtributo(node);
    }

    public void inAVazioListaExp(AVazioListaExp node)
    {
        defaultIn(node);
    }

    public void outAVazioListaExp(AVazioListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaExp(AVazioListaExp node)
    {
        inAVazioListaExp(node);
        outAVazioListaExp(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        {
            List<PVirgExpAux> copy = new ArrayList<PVirgExpAux>(node.getVirgExpAux());
            Collections.reverse(copy);
            for(PVirgExpAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaExpListaExp(node);
    }

    public void inAIdPontoIdPontoAux(AIdPontoIdPontoAux node)
    {
        defaultIn(node);
    }

    public void outAIdPontoIdPontoAux(AIdPontoIdPontoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdPontoIdPontoAux(AIdPontoIdPontoAux node)
    {
        inAIdPontoIdPontoAux(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdPontoIdPontoAux(node);
    }

    public void inAVirgExpVirgExpAux(AVirgExpVirgExpAux node)
    {
        defaultIn(node);
    }

    public void outAVirgExpVirgExpAux(AVirgExpVirgExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgExpVirgExpAux(AVirgExpVirgExpAux node)
    {
        inAVirgExpVirgExpAux(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgExpVirgExpAux(node);
    }

    public void inAVirgInicializacaoVirgInicializacaoAux(AVirgInicializacaoVirgInicializacaoAux node)
    {
        defaultIn(node);
    }

    public void outAVirgInicializacaoVirgInicializacaoAux(AVirgInicializacaoVirgInicializacaoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgInicializacaoVirgInicializacaoAux(AVirgInicializacaoVirgInicializacaoAux node)
    {
        inAVirgInicializacaoVirgInicializacaoAux(node);
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgInicializacaoVirgInicializacaoAux(node);
    }

    public void inAVirgIdVirgIdAux(AVirgIdVirgIdAux node)
    {
        defaultIn(node);
    }

    public void outAVirgIdVirgIdAux(AVirgIdVirgIdAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgIdVirgIdAux(AVirgIdVirgIdAux node)
    {
        inAVirgIdVirgIdAux(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgIdVirgIdAux(node);
    }

    public void inADecObjDecAux(ADecObjDecAux node)
    {
        defaultIn(node);
    }

    public void outADecObjDecAux(ADecObjDecAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjDecAux(ADecObjDecAux node)
    {
        inADecObjDecAux(node);
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjDecAux(node);
    }

    public void inADecVarDecAux(ADecVarDecAux node)
    {
        defaultIn(node);
    }

    public void outADecVarDecAux(ADecVarDecAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarDecAux(ADecVarDecAux node)
    {
        inADecVarDecAux(node);
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarDecAux(node);
    }

    public void inADecConsDecAux(ADecConsDecAux node)
    {
        defaultIn(node);
    }

    public void outADecConsDecAux(ADecConsDecAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsDecAux(ADecConsDecAux node)
    {
        inADecConsDecAux(node);
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsDecAux(node);
    }

    public void inAVirgParametroAux(AVirgParametroAux node)
    {
        defaultIn(node);
    }

    public void outAVirgParametroAux(AVirgParametroAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgParametroAux(AVirgParametroAux node)
    {
        inAVirgParametroAux(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAVirgParametroAux(node);
    }

    public void inADecProcedimentoMetodosAux(ADecProcedimentoMetodosAux node)
    {
        defaultIn(node);
    }

    public void outADecProcedimentoMetodosAux(ADecProcedimentoMetodosAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedimentoMetodosAux(ADecProcedimentoMetodosAux node)
    {
        inADecProcedimentoMetodosAux(node);
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outADecProcedimentoMetodosAux(node);
    }

    public void inADecFuncaoMetodosAux(ADecFuncaoMetodosAux node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoMetodosAux(ADecFuncaoMetodosAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoMetodosAux(ADecFuncaoMetodosAux node)
    {
        inADecFuncaoMetodosAux(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoMetodosAux(node);
    }

    public void inAEComercialRelacaoFamiliaAux(AEComercialRelacaoFamiliaAux node)
    {
        defaultIn(node);
    }

    public void outAEComercialRelacaoFamiliaAux(AEComercialRelacaoFamiliaAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEComercialRelacaoFamiliaAux(AEComercialRelacaoFamiliaAux node)
    {
        inAEComercialRelacaoFamiliaAux(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        if(node.getEComercial() != null)
        {
            node.getEComercial().apply(this);
        }
        outAEComercialRelacaoFamiliaAux(node);
    }
}
